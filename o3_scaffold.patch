From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mesh-o3-bot <mesh-o3@example.com>
Date: 2025-04-25 14:00:00 +0000
Subject: Pulse scaffolding: synthetic Φ stream, logger action, docs

---
 .github/workflows/pulse-log.yml | 24 ++++++++++++++++++++++++
 docs/ARCHITECTURE.svg           | 36 ++++++++++++++++++++++++++++++++++++
 scripts/delta_phi.py            | 23 +++++++++++++++++++++++
 sim/phi_walk.py                 | 56 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 139 insertions(+)
 create mode 100644 .github/workflows/pulse-log.yml
 create mode 100644 docs/ARCHITECTURE.svg
 create mode 100644 scripts/delta_phi.py
 create mode 100644 sim/phi_walk.py

diff --git a/.github/workflows/pulse-log.yml b/.github/workflows/pulse-log.yml
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/.github/workflows/pulse-log.yml
@@
+name: Pulse-log
+on:
+  push:
+    branches: [main]
+jobs:
+  stamp:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+      - name: Append pulse entry
+        run: |
+          dt=$(date -u +'%F')
+          sha=${{ github.sha }}
+          author="${{ github.actor }}"
+          delta=$(python scripts/delta_phi.py || echo "n/a")
+          mkdir -p pulse
+          echo "- sha: \"$sha\"  author: \"$author\"  ΔΦ: $delta" >> pulse/$dt.yml
+      - uses: EndBug/add-and-commit@v9
+        with:
+          message: "pulse: log ${{ github.sha }}"
+
diff --git a/docs/ARCHITECTURE.svg b/docs/ARCHITECTURE.svg
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/docs/ARCHITECTURE.svg
@@
+<!-- quick text SVG placeholder -->
+<svg xmlns="http://www.w3.org/2000/svg" width="600" height="320" font-family="monospace">
+  <rect width="100%" height="100%" fill="#ffffff"/>
+  <text x="50" y="40" font-size="18" fill="#000000">Φ‑Mesh High‑Level Flow</text>
+  <text x="20" y="90">Sensor → Broker → ΔΦ Scorer → Safety Guard‑rails → Action Composer → Device</text>
+  <text x="20" y="140">edge                 cloud                                           edge</text>
+</svg>
+
diff --git a/scripts/delta_phi.py b/scripts/delta_phi.py
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/scripts/delta_phi.py
@@
+"""Compute ΔΦ between HEAD and previous commit.
+
+Assumes any JSON lines files in data/ contain a key "phi".
+Returns mean(φ_HEAD) - mean(φ_prev) to stdout.
+If no data changed, prints "n/a".
+"""
+
+import json, pathlib, subprocess, statistics, sys, tempfile
+
+root = pathlib.Path(__file__).resolve().parents[1]
+data_files = list((root / "data").glob("*.jsonl"))
+if not data_files:
+    print("n/a")
+    sys.exit(0)
+
+def mean_phi(rev: str):
+    total = []
+    for f in data_files:
+        try:
+            blob = subprocess.check_output(["git", "show", f"{rev}:{f.relative_to(root)}"], text=True)
+        except subprocess.CalledProcessError:
+            continue
+        for line in blob.splitlines():
+            obj = json.loads(line)
+            if "phi" in obj:
+                total.append(obj["phi"])
+    return statistics.mean(total) if total else None
+
+head = mean_phi("HEAD")
+prev = mean_phi("HEAD~1")
+if head is None or prev is None:
+    print("n/a")
+else:
+    print(f"{head-prev:.5f}")
+
diff --git a/sim/phi_walk.py b/sim/phi_walk.py
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/sim/phi_walk.py
@@
+"""Synthetic Φ walk generator.
+
+Generates JSON‑lines records that match `data-schema.json`.
+Use for CI tests, dashboard prototyping or offline demos.
+
+Example:
+    python sim/phi_walk.py --sensors 2 --steps 240 --dt 30 > data/synthetic_2025-04-25.jsonl
+"""
+
+from __future__ import annotations
+
+import argparse, json, math, random, sys, time
+from datetime import datetime, timezone
+
+def phi_series(steps: int, base: float):
+    """Simple bounded random walk around base value."""
+    val = base
+    for _ in range(steps):
+        val += random.uniform(-0.005, 0.005)
+        val = max(0.01, min(val, 1.0))
+        yield round(val, 5)
+
+def main():
+    p = argparse.ArgumentParser()
+    p.add_argument("--sensors", type=int, default=1)
+    p.add_argument("--steps", type=int, default=100)
+    p.add_argument("--dt", type=int, default=60, help="seconds between samples")
+    args = p.parse_args()
+
+    start = time.time()
+    for sid in range(args.sensors):
+        base = random.uniform(0.05, 0.25)
+        for idx, phi in enumerate(phi_series(args.steps, base)):
+            record = {
                "timestamp": datetime.fromtimestamp(start + idx*args.dt, tz=timezone.utc).isoformat(),
                "sensor_id": f"synthetic_{sid}",
                "phi": phi,
                "entropy": round(random.uniform(0.005, 0.02), 5),
                "energy_flux": round(random.uniform(0.5, 2.0), 3),
            }
            print(json.dumps(record))

if __name__ == "__main__":
    main()
+
-- 
2.44.0
