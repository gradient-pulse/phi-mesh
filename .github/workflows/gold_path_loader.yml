name: GOLD PATH â€” Loader (Hopkins/Princeton)

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Data source: jhtdb | princeton | demo"
        required: true
        default: "jhtdb"
      params:
        description: "JSON params. JHTDB: {\"flow\",\"x\",\"y\",\"z\",\"t0\",\"dt\",\"nsteps\",\"slug\"}  Princeton: {\"subset_path\",\"slug\"}"
        required: false
        default: '{"flow":"isotropic1024coarse","x":0.1,"y":0.2,"z":0.3,"t0":0.0,"dt":0.0005,"nsteps":2400,"slug":"isotropic"}'

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      JHTDB_TOKEN: ${{ secrets.JHTDB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (SOAP + HDF5 + helpers)
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas pyyaml pyarrow suds-community h5py matplotlib

      - name: Parse params
        id: parse
        run: |
          echo "params<<EOF" >> "$GITHUB_OUTPUT"
          echo '${{ github.event.inputs.params }}' >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Show plan
        run: |
          echo "source = ${{ github.event.inputs.source }}"
          echo "params = ${{ steps.parse.outputs.params }}"

      # ----------------------------- JHTDB path -----------------------------
      - name: Run JHTDB pipeline
        if: ${{ github.event.inputs.source == 'jhtdb' }}
        shell: python
        run: |
          import json, subprocess, shlex
          from pathlib import Path
          r = json.loads('${{ steps.parse.outputs.params }}')
          # call loader
          cmd = (
            f"python tools/fd_connectors/jhtdb/jhtdb_loader.py"
            f" --flow {r['flow']}"
            f" --x {r['x']} --y {r['y']} --z {r['z']}"
            f" --t0 {r['t0']} --dt {r['dt']} --nsteps {r['nsteps']}"
            f" --slug {r['slug']}"
          )
          subprocess.check_call(shlex.split(cmd))
          # analyze + pulse
          stem = f"{r['flow']}__x{r['x']}_y{r['y']}_z{r['z']}__t{r['t0']}_dt{r['dt']}_n{r['nsteps']}"
          meta = f"data/jhtdb/{stem}.meta.json"
          out  = f"results/fd_probe/{stem}.analysis.json"
          Path("results/fd_probe").mkdir(parents=True, exist_ok=True)
          subprocess.check_call(["python","tools/fd_connectors/jhtdb/analyze_probe.py","--meta",meta,"--out",out])
          subprocess.check_call([
            "python","tools/fd_connectors/jhtdb/make_pulse_from_probe.py",
            "--flow",r["flow"],"--x",str(r["x"]),"--y",str(r["y"]),"--z",str(r["z"]),
            "--t0",str(r["t0"]),"--dt",str(r["dt"]),"--nsteps",str(r["nsteps"]),
            "--slug",r["slug"]
          ])

      # --------------------------- Princeton path ---------------------------
      - name: Run Princeton pipeline
        if: ${{ github.event.inputs.source == 'princeton' }}
        shell: python
        run: |
          import json, subprocess
          from pathlib import Path
          r = json.loads('${{ steps.parse.outputs.params }}')
          subset = r.get("subset_path") or r.get("subset")  # allow either key
          if not subset:
            raise SystemExit("params must include 'subset_path' (or 'subset').")
          slug = r.get("slug") or Path(subset).stem
          Path("results/princeton").mkdir(parents=True, exist_ok=True)
          out = f"results/princeton/{slug}.analysis.json"
          # Run local runner with explicit --out (no --slug flag)
          subprocess.check_call([
            "python","analysis/princeton_probe/run_pipeline.py",
            "--subset",subset,"--out",out
          ])

      # ----------------------------- Demo path ------------------------------
      - name: Run Demo pipeline (synthetic Princeton)
        if: ${{ github.event.inputs.source == 'demo' }}
        shell: python
        run: |
          import numpy as np, pandas as pd, subprocess
          from pathlib import Path
          # Write small synthetic subset
          Path("data/princeton").mkdir(parents=True, exist_ok=True)
          t = np.linspace(0, 6, 6001)
          u = np.sin(2*np.pi*0.8*t) + 0.1*np.random.randn(t.size)
          v = np.sin(2*np.pi*1.6*t + 0.3) + 0.1*np.random.randn(t.size)
          w = np.sin(2*np.pi*2.4*t + 1.1) + 0.1*np.random.randn(t.size)
          df = pd.DataFrame({"t":t,"u":u,"v":v,"w":w})
          subset = "data/princeton/demo_subset.csv"
          df.to_csv(subset,index=False)
          # Ensure out dir exists and run
          Path("results/princeton").mkdir(parents=True, exist_ok=True)
          out = "results/princeton/demo.analysis.json"
          subprocess.check_call([
            "python","analysis/princeton_probe/run_pipeline.py",
            "--subset",subset,"--out",out
          ])

      # ---------------------------- Commit outputs --------------------------
      - name: Commit outputs
        if: always()
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Don't fail if a glob matches nothing
          git add -A data/jhtdb || true
          git add -A data/princeton || true
          git add -A results/fd_probe || true
          git add -A results/princeton || true
          git add -A pulse/auto || true
          git commit -m "gold-path: results + pulses" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push || true
