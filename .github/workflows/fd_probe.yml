name: FD probe (metrics + pulse)

on:
  workflow_dispatch:
    inputs:
      source:
        description: "synthetic | jhtdb | nasa"
        required: true
        default: "jhtdb"
      dataset:
        description: "dataset slug or path (free text; will be auto-sanitized)"
        required: true
        default: "isotropic1024coarse"
      var:
        description: "variable name"
        required: true
        default: "u"
      xyz:
        description: "probe point as x,y,z"
        required: true
        default: "0.1,0.1,0.1"
      twin:
        description: "time window as t0,t1,dt"
        required: true
        default: "0.0,1.0,0.0005"
      title:
        description: "pulse title"
        required: true
        default: "NT Rhythm â€” FD Probe"
      tags:
        description: "space-separated tags"
        required: true
        default: "nt_rhythm turbulence navier_stokes rgp"

permissions:
  contents: write

jobs:
  fd-probe:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml numpy

      - name: Normalize inputs + compute daily batch
        id: prep
        shell: bash
        env:
          SRC: ${{ github.event.inputs.source }}
          DATASET: ${{ github.event.inputs.dataset }}
        run: |
          set -euo pipefail

          # sanitize dataset to slug
          py='import re,sys; s=sys.argv[1].strip().lower(); s=re.sub(r"[^a-z0-9._-]+","_",s); s=re.sub(r"_+","_",s).strip("_"); print(s or "dataset")'
          DS_SLUG=$(python -c "$py" "$DATASET")

          # source slug
          SRC_SLUG=$(echo "${SRC}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/_/g')

          # base slug (no date, no batch)
          BASE="${DS_SLUG}_${SRC_SLUG}"

          # today (UTC in CI)
          TODAY=$(date -u +%F)
          mkdir -p results/fd_probe

          # next daily batch number
          shopt -s nullglob
          existing=(results/fd_probe/${TODAY}_${BASE}_batch*.metrics.json)
          if [[ ${#existing[@]} -gt 0 ]]; then
            last=$(ls -1 results/fd_probe/${TODAY}_${BASE}_batch*.metrics.json | sed -E 's/.*_batch([0-9]+)\.metrics\.json/\1/' | sort -n | tail -1)
            NEXT=$(( last + 1 ))
          else
            NEXT=1
          fi

          METRICS="results/fd_probe/${TODAY}_${BASE}_batch${NEXT}.metrics.json"
          PULSE_SLUG="${BASE}_batch${NEXT}"

          echo "today=${TODAY}"           >> "$GITHUB_OUTPUT"
          echo "base=${BASE}"             >> "$GITHUB_OUTPUT"
          echo "batch=${NEXT}"            >> "$GITHUB_OUTPUT"
          echo "metrics_path=${METRICS}"  >> "$GITHUB_OUTPUT"
          echo "pulse_slug=${PULSE_SLUG}" >> "$GITHUB_OUTPUT"

          echo "::notice title=Batch::Using ${TODAY}_${BASE}_batch${NEXT}"

      - name: Duplicate-run guard (soft)
        shell: bash
        env:
          XYZ:  ${{ github.event.inputs.xyz }}
          TWIN: ${{ github.event.inputs.twin }}
        run: |
          set -euo pipefail
          TODAY="${{ steps.prep.outputs.today }}"
          BASE="${{ steps.prep.outputs.base }}"

          # Most recent metrics for THIS DAY + BASE (if any)
          latest=$(ls -1t "results/fd_probe/${TODAY}_${BASE}_batch"*.metrics.json 2>/dev/null | head -n1 || true)

          if [[ -n "$latest" ]]; then
            # Clean inputs once to avoid spaces in argv
            XYZ_CLEAN="${XYZ// /}"
            TWIN_CLEAN="${TWIN// /}"

            # Write a tiny checker without heredoc (safe for YAML linters)
            printf '%s\n' \
              'import json,sys' \
              'p,ix,iw=sys.argv[1:4]' \
              'with open(p,"r",encoding="utf-8") as f:' \
              '    m=json.load(f)' \
              'd=m.get("details",{})' \
              'xyz=d.get("xyz")' \
              'win=d.get("window")' \
              'lxyz=",".join(map(str,xyz)) if isinstance(xyz,(list,tuple)) else ""' \
              'lwin=",".join(map(str,win)) if isinstance(win,(list,tuple)) else ""' \
              'if lxyz==ix and lwin==iw:' \
              '    print(f"::warning title=Duplicate run?::Same xyz/window as latest today ({p}). Continuing anyway.")' \
              > /tmp/dup_check.py

            python /tmp/dup_check.py "$latest" "$XYZ_CLEAN" "$TWIN_CLEAN"
          fi

      - name: Run FD probe
        env:
          NASA_CSV:    ${{ secrets.NASA_CSV }}
          JHTDB_TOKEN: ${{ secrets.JHTDB_TOKEN }}
        run: |
          set -euo pipefail
          python tools/fd_connectors/run_fd_probe.py \
            --source "${{ github.event.inputs.source }}" \
            --dataset "${{ github.event.inputs.dataset }}" \
            --var "${{ github.event.inputs.var }}" \
            --xyz "${{ github.event.inputs.xyz }}" \
            --twin "${{ github.event.inputs.twin }}" \
            --json-out "${{ steps.prep.outputs.metrics_path }}" \
            --title "${{ github.event.inputs.title }}" \
            --tags "${{ github.event.inputs.tags }}"

      - name: Emit pulse (date in filename; slug keeps _batchN)
        run: |
          set -euo pipefail
          python tools/agent_rhythm/make_pulse.py \
            --metrics "${{ steps.prep.outputs.metrics_path }}" \
            --title   "${{ github.event.inputs.title }}" \
            --dataset "${{ steps.prep.outputs.pulse_slug }}" \
            --tags    "${{ github.event.inputs.tags }}" \
            --outdir  "pulse/auto"

      - name: Commit results + pulse + maps
        run: |
          set -euo pipefail
          git config user.name  "phi-mesh-bot"
          git config user.email "actions@users.noreply.github.com"
          git add results/fd_probe/*.json pulse/auto/*.yml
          git add maps/* || true
          git commit -m "auto: FD probe (${{ steps.prep.outputs.today }} ${{ steps.prep.outputs.base }} batch ${{ steps.prep.outputs.batch }}) results + pulse + updated maps" || echo "Nothing to commit"
          git push
