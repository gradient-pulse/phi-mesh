name: Build Tags & Graph (exclude archive)

on:
  push:
    branches: [ main ]
    paths:
      - 'pulse/**/*.yml'
      - 'meta/aliases.yml'
      - 'meta/tag_descriptions.yml'
      - 'generate_graph_data.py'
      - '.github/workflows/build_tags_and_graph.yml'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-tags-and-graph
  cancel-in-progress: true

jobs:
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Prepare pulse build view (exclude archive)
        run: |
          set -euo pipefail
          rm -rf pulse/_buildview
          mkdir -p pulse/_buildview
          shopt -s nullglob

          # Top-level pulses
          for f in pulse/*.yml; do
            ln -s "../$(basename "$f")" "pulse/_buildview/$(basename "$f")" || true
          done

          # Auto pulses (included)
          if compgen -G "pulse/auto/*.yml" > /dev/null; then
            for f in pulse/auto/*.yml; do
              base="$(basename "$f")"
              ln -s "../auto/$base" "pulse/_buildview/auto_$base" || true
            done
          fi

          echo "---- buildview contents ----"
          ls -la pulse/_buildview || true

      # Canary: ensure root generator is the canonicalizing version
      - name: Generator canary (canon_tag present)
        run: |
          python - <<'PY'
          import pathlib, sys
          txt = pathlib.Path("generate_graph_data.py").read_text(encoding="utf-8")
          ok = "def canon_tag(" in txt
          print("[GEN] canon_tag present:", ok)
          sys.exit(0 if ok else 3)
          PY

      # Enforce root generator & bust any stale artifact
      - name: Force root generator and bust cache
        run: |
          set -euo pipefail
          if [ -f tools/generate_graph_data.py ]; then
            cat > tools/generate_graph_data.py <<'PY'
import subprocess, sys
sys.exit(subprocess.call([sys.executable, "generate_graph_data.py", *sys.argv[1:]]))
PY
          fi
          rm -f docs/data.js

      - name: Generate docs/data.js
        run: |
          mkdir -p docs
          python generate_graph_data.py \
            --pulse-glob "pulse/_buildview/*.yml" \
            --alias-map meta/aliases.yml \
            --tag-descriptions meta/tag_descriptions.yml \
            --out-js docs/data.js

      - name: Validate data.js
        run: |
          test -s docs/data.js || (echo "ERROR: docs/data.js is empty" && exit 2)
          head -n 1 docs/data.js | grep -q "window.PHI_DATA" || (echo "ERROR: data.js missing window.PHI_DATA" && exit 3)
          echo "OK: docs/data.js looks good."

      # Audit: fail if case-insensitive duplicate tag IDs exist (e.g., Turbulence vs turbulence)
      - name: Audit for case-insensitive duplicate tags
        run: |
          python - <<'PY'
          import json, re, collections, sys
          try:
              txt = open("docs/data.js","r",encoding="utf-8").read()
          except Exception as e:
              print("ERROR: cannot read docs/data.js:", e); sys.exit(4)
          m = re.search(r"window\.PHI_DATA\s*=\s*(\{.*\});\s*$", txt, re.S)
          if not m:
              print("ERROR: cannot parse window.PHI_DATA payload"); sys.exit(4)
          data = json.loads(m.group(1))
          ids = [n.get("id","") for n in data.get("nodes",[])]
          by = collections.defaultdict(list)
          for t in ids:
              by[t.lower()].append(t)
          dupes = {k:v for k,v in by.items() if len(v) > 1}
          if dupes:
              print("❌ case-insensitive duplicates detected:")
              for k,v in sorted(dupes.items()):
                  print("  ", k, "=>", v)
              sys.exit(5)
          print("✅ no case-insensitive duplicates")
          PY

      - name: Commit generated artifacts
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/data.js
          git diff --cached --quiet && echo "No changes to commit" && exit 0
          git commit -m "auto: rebuild data.js (exclude archive, canonicalized)"
          git pull --rebase origin main || true
          git push
