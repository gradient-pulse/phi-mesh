name: Run JHTDB Loader

on:
  workflow_dispatch:
    inputs:
      flow:       { description: "Flow dataset name (e.g. isotropic1024coarse)", required: false, default: "isotropic1024coarse" }
      x:          { description: "Probe X coordinate", required: false, default: "0.1" }
      y:          { description: "Probe Y coordinate", required: false, default: "0.2" }
      z:          { description: "Probe Z coordinate", required: false, default: "0.3" }
      t0:         { description: "Start time", required: false, default: "0.0" }
      dt:         { description: "Time step", required: false, default: "0.0005" }
      nsteps:     { description: "Number of steps", required: false, default: "2400" }
      slug:       { description: "Slug for filenames", required: false, default: "isotropic" }
      batch_file: { description: "Optional tools/fd_connectors/jhtdb/batch.yml", required: false, default: "" }

permissions:
  contents: write

concurrency:
  group: jhtdb-run
  cancel-in-progress: true

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set_matrix
        shell: bash
        run: |
          set -euo pipefail
          BF="${{ github.event.inputs.batch_file }}"

          if [[ -n "$BF" && -f "$BF" ]]; then
            echo "Using batch file: $BF"
            python -m pip install -q --user pyyaml
            python - <<'PY' > matrix.json
import os, json, yaml, io
p = os.environ.get("BF")
d = yaml.safe_load(io.open(p, "r", encoding="utf-8")) or {}
runs = list(d.get("runs", []))
print(json.dumps({"include": runs}, separators=(",",":")))
PY
          else
            echo 'Single run parameters'
            python - <<'PY' > matrix.json
import json
print(json.dumps({
  "include": [{
    "flow":   "${{ github.event.inputs.flow }}",
    "x":      ${{ github.event.inputs.x }},
    "y":      ${{ github.event.inputs.y }},
    "z":      ${{ github.event.inputs.z }},
    "t0":     ${{ github.event.inputs.t0 }},
    "dt":     ${{ github.event.inputs.dt }},
    "nsteps": ${{ github.event.inputs.nsteps }},
    "slug":  "${{ github.event.inputs.slug }}"
  }]
}, separators=(",",":")))
PY
          fi

          echo 'Planned matrix:'; cat matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"

  run:
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.plan.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (SOAP + helpers)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "numpy" "pandas" "pyyaml" "suds-community"

      - name: Show selected inputs
        run: |
          echo "flow   = ${{ matrix.flow }}"
          echo "x,y,z  = ${{ matrix.x }}, ${{ matrix.y }}, ${{ matrix.z }}"
          echo "t0,dt  = ${{ matrix.t0 }}, ${{ matrix.dt }}"
          echo "nsteps = ${{ matrix.nsteps }}"
          echo "slug   = ${{ matrix.slug }}"

      - name: Run JHTDB loader (fetch CSV cache)
        run: |
          set -euo pipefail
          python tools/fd_connectors/jhtdb/jhtdb_loader.py \
            --flow   "${{ matrix.flow }}" \
            --x      "${{ matrix.x }}" \
            --y      "${{ matrix.y }}" \
            --z      "${{ matrix.z }}" \
            --t0     "${{ matrix.t0 }}" \
            --dt     "${{ matrix.dt }}" \
            --nsteps "${{ matrix.nsteps }}"

      - name: Analyze probe (auto-find meta; stable stem)
        id: analyze
        shell: bash
        run: |
          set -euo pipefail
          STEM="${{ matrix.flow }}__x${{ matrix.x }}_y${{ matrix.y }}_z${{ matrix.z }}__t0${{ matrix.t0 }}_dt${{ matrix.dt }}_n${{ matrix.nsteps }}"
          META="data/jhtdb/${STEM}.meta.json"
          if [[ ! -f "$META" ]]; then
            echo "Meta not found at $META"
            echo "Trying glob fallbackâ€¦"
            META=$(ls -1 data/jhtdb/${{ matrix.flow }}__x${{ matrix.x }}_y${{ matrix.y }}_z${{ matrix.z }}__t0*_dt${{ matrix.dt }}_n${{ matrix.nsteps }}.meta.json | head -n1 || true)
          fi
          if [[ -z "$META" || ! -f "$META" ]]; then
            echo "ERROR: meta file not found."
            exit 1
          fi

          OUT="results/fd_probe/${STEM}.analysis.json"
          mkdir -p results/fd_probe
          echo "Meta: $META"
          echo "Out : $OUT"
          python tools/fd_connectors/jhtdb/analyze_probe.py --meta "$META" --out "$OUT"

          # Pass paths to later steps
          echo "meta_file=$META" >> "$GITHUB_OUTPUT"
          echo "out_file=$OUT"  >> "$GITHUB_OUTPUT"

      - name: Generate pulse (consistent filenames)
        run: |
          set -euo pipefail
          # Use the original interface that worked last week
          python tools/fd_connectors/jhtdb/make_pulse_from_probe.py \
            --flow   "${{ matrix.flow }}" \
            --x      "${{ matrix.x }}" \
            --y      "${{ matrix.y }}" \
            --z      "${{ matrix.z }}" \
            --t0     "${{ matrix.t0 }}" \
            --dt     "${{ matrix.dt }}" \
            --nsteps "${{ matrix.nsteps }}" \
            --slug   "${{ matrix.slug }}"

      - name: Show outputs before commit
        run: |
          echo "== data/jhtdb =="
          ls -l data/jhtdb || true
          echo
          echo "== results/fd_probe =="
          ls -l results/fd_probe || true
          echo
          echo "== pulse/auto =="
          ls -l pulse/auto || true

      - name: Commit outputs (only if changed)
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A data/jhtdb results/fd_probe pulse/auto
          if git diff --cached --quiet; then
            echo "No new files to commit."
            exit 0
          fi
          git commit -m "data(jhtdb): probe evidence + analysis + pulse(s)"
          git pull --rebase origin main || true
          git push
