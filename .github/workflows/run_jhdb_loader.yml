name: Run JHTDB Loader

on:
  workflow_dispatch:
    inputs:
      flow:
        description: "Flow dataset (e.g., isotropic1024coarse)"
        required: false
        default: "isotropic1024coarse"
      x:
        description: "Probe X coordinate"
        required: false
        default: "0.1"
      y:
        description: "Probe Y coordinate"
        required: false
        default: "0.1"
      z:
        description: "Probe Z coordinate"
        required: false
        default: "0.1"
      t0:
        description: "Start time"
        required: false
        default: "0.0"
      dt:
        description: "Time step"
        required: false
        default: "0.0005"
      nsteps:
        description: "Number of steps"
        required: false
        default: "2400"
      slug:
        description: "Slug for filenames (used by pulse step)"
        required: false
        default: "isotropic"
      batch_file:
        description: "Optional batch.yml (overrides single-run inputs)"
        required: false
        default: "tools/fd_connectors/jhtdb/batch_grid_0005.yml"

permissions:
  contents: write

concurrency:
  group: jhtdb-run
  cancel-in-progress: true

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set_matrix
        shell: bash
        run: |
          set -euo pipefail
          BF="${{ github.event.inputs.batch_file }}"
          if [[ -n "$BF" && -f "$BF" ]]; then
            echo "Using batch file: $BF"
            python - <<'PY'
import json, yaml, io, os
p = os.environ.get("BF_PATH")
with io.open(p, "r", encoding="utf-8") as f:
    d = yaml.safe_load(f) or {}
runs = list(d.get("runs", []))
print(json.dumps({"include": runs}, separators=(",",":")))
PY
          else
            echo "Single run parameters"
            python -c "import json; print(json.dumps({'include':[{'flow':'${{ github.event.inputs.flow }}','x':float('${{ github.event.inputs.x }}'),'y':float('${{ github.event.inputs.y }}'),'z':float('${{ github.event.inputs.z }}'),'t0':float('${{ github.event.inputs.t0 }}'),'dt':float('${{ github.event.inputs.dt }}'),'nsteps':int('${{ github.event.inputs.nsteps }}'),'slug':'${{ github.event.inputs.slug }}'}]},separators=(',',':')))"
          fi > matrix.json
          echo 'Planned matrix:'; cat matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
        env:
          BF_PATH: ${{ github.event.inputs.batch_file }}

  run:
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.plan.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (SOAP + helpers)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install numpy pyyaml pandas pyarrow suds-py3

      - name: Run JHTDB loader (fetch CSV cache)
        env:
          PYTHONPATH: ${{ github.workspace }}
          JHTDB_TOKEN: ${{ secrets.JHTDB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p data/jhtdb results/fd_probe pulse/auto
          python tools/fd_connectors/jhtdb/jhtdb_loader.py \
            --flow   "${{ matrix.flow }}" \
            --x      "${{ matrix.x }}" \
            --y      "${{ matrix.y }}" \
            --z      "${{ matrix.z }}" \
            --t0     "${{ matrix.t0 }}" \
            --dt     "${{ matrix.dt }}" \
            --nsteps "${{ matrix.nsteps }}"

      - name: Analyze probe (auto-find meta)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          pattern=$(printf 'data/jhtdb/%s__x%s_y%s_z%s__t*_dt%s_n%s.meta.json' \
            "${{ matrix.flow }}" "${{ matrix.x }}" "${{ matrix.y }}" "${{ matrix.z }}" \
            "${{ matrix.dt }}" "${{ matrix.nsteps }}")
          meta_file=$(ls $pattern 2>/dev/null | head -n1 || true)
          if [[ -z "$meta_file" ]]; then
            echo "ERROR: meta file not found with pattern: $pattern"
            exit 1
          fi
          out_file=$(printf 'results/fd_probe/%s__x%s_y%s_z%s__t%s_dt%s_n%s.analysis.json' \
            "${{ matrix.flow }}" "${{ matrix.x }}" "${{ matrix.y }}" "${{ matrix.z }}" \
            "${{ matrix.t0 }}" "${{ matrix.dt }}" "${{ matrix.nsteps }}")
          echo "Meta: $meta_file"
          echo "Out : $out_file"
          python tools/fd_connectors/jhtdb/analyze_probe.py --meta "$meta_file" --out "$out_file"

      - name: Generate pulse
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          python tools/fd_connectors/jhtdb/make_pulse_from_probe.py \
            --flow   "${{ matrix.flow }}" \
            --x      "${{ matrix.x }}" \
            --y      "${{ matrix.y }}" \
            --z      "${{ matrix.z }}" \
            --t0     "${{ matrix.t0 }}" \
            --dt     "${{ matrix.dt }}" \
            --nsteps "${{ matrix.nsteps }}" \
            --slug   "${{ matrix.slug }}"

      - name: Show outputs before commit
        shell: bash
        run: |
          echo "== data/jhtdb ==";      ls -l data/jhtdb || true; echo
          echo "== results/fd_probe =="; ls -l results/fd_probe || true; echo
          echo "== pulse/auto ==";       ls -l pulse/auto || true

      - name: Commit outputs
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A data/jhtdb results/fd_probe pulse/auto
          if git diff --cached --quiet; then
            echo "No new files to commit."
            exit 0
          fi
          git commit -m "data(jhtdb): probe evidence + analysis + pulse(s)"
          git pull --rebase --autostash origin main || true
          git push || true
