name: Run JHTDB Loader

on:
  workflow_dispatch:
    inputs:
      flow:
        description: "Flow dataset name (e.g. isotropic1024coarse)"
        required: false
        default: "isotropic1024coarse"
      x:        { description: "Probe X", required: false, default: "0.1" }
      y:        { description: "Probe Y", required: false, default: "0.2" }
      z:        { description: "Probe Z", required: false, default: "0.3" }
      t0:       { description: "Start time", required: false, default: "0.0" }
      dt:       { description: "Time step", required: false, default: "0.002" }
      nsteps:   { description: "Samples", required: false, default: "2000" }
      slug:
        description: "Slug for filenames"
        required: false
        default: "isotropic"
      batch_file:
        description: "Optional batch.yml (overrides inputs)"
        required: false
        default: ""

permissions:
  contents: write

concurrency:
  group: jhtdb-run
  cancel-in-progress: true

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set_matrix
        shell: bash
        run: |
          set -euo pipefail

          if [[ -n "${{ github.event.inputs.batch_file }}" && -f "${{ github.event.inputs.batch_file }}" ]]; then
            echo "Using batch file: ${{ github.event.inputs.batch_file }}"
            matrix_json="$(BATCH='${{ github.event.inputs.batch_file }}' python -c 'import json,yaml,os; p=os.environ.get("BATCH"); d=yaml.safe_load(open(p,"r",encoding="utf-8")) or {}; runs=list(reversed(d.get("runs",[]))); print(json.dumps({"include":runs},separators=(",",":")))' )"
          else
            echo "Using single-run inputs"
            matrix_json="$(python -c 'import json; print(json.dumps({"include":[{"flow":"${{ github.event.inputs.flow }}","x":float("${{ github.event.inputs.x }}"),"y":float("${{ github.event.inputs.y }}"),"z":float("${{ github.event.inputs.z }}"),"t0":float("${{ github.event.inputs.t0 }}"),"dt":float("${{ github.event.inputs.dt }}"),"nsteps":int("${{ github.event.inputs.nsteps }}"),"slug":"${{ github.event.inputs.slug }}","batch":1}]},separators=(",",":")))' )"
          fi

          echo "Planned matrix JSON:"
          echo "$matrix_json"

          # hand to next job
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  run:
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install numpy scipy pyyaml

      - name: Run JHTDB loader
        run: |
          set -euo pipefail
          python tools/fd_connectors/jhtdb/jhtdb_loader.py \
            --flow "${{ matrix.flow }}" \
            --x "${{ matrix.x }}" --y "${{ matrix.y }}" --z "${{ matrix.z }}" \
            --t0 "${{ matrix.t0 }}" --dt "${{ matrix.dt }}" --nsteps "${{ matrix.nsteps }}" \
            --slug "${{ matrix.slug }}"

      - name: Analyze probe
        run: |
          set -euo pipefail
          python tools/fd_connectors/jhtdb/analyze_probe.py \
            --flow "${{ matrix.flow }}" \
            --x "${{ matrix.x }}" --y "${{ matrix.y }}" --z "${{ matrix.z }}" \
            --t0 "${{ matrix.t0 }}" --dt "${{ matrix.dt }}" --nsteps "${{ matrix.nsteps }}" \
            --slug "${{ matrix.slug }}"

      - name: Generate pulse (strict naming)
        run: |
          set -euo pipefail
          python tools/fd_connectors/jhtdb/make_pulse_from_probe.py \
            --flow "${{ matrix.flow }}" \
            --x "${{ matrix.x }}" --y "${{ matrix.y }}" --z "${{ matrix.z }}" \
            --t0 "${{ matrix.t0 }}" --dt "${{ matrix.dt }}" --nsteps "${{ matrix.nsteps }}" \
            --slug "${{ matrix.slug }}" \
            --batch "${{ matrix.batch || 1 }}"

      - name: Commit outputs
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/jhtdb/*.csv.gz data/jhtdb/*.meta.json data/jhtdb/*.analysis.json \
                 results/fd_probe/*.json pulse/auto/*.yml 2>/dev/null || true
          if git diff --cached --quiet; then
            echo "No new files to commit."
            exit 0
          fi
          git commit -m "data(jhtdb): probe evidence + analysis + pulse(s)"
          git pull --rebase origin main || true
          git push
