name: RGP–NS Grid (multi-probe agent run)

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Data source (jhtdb | synthetic)"
        required: true
        default: "jhtdb"
      dataset:
        description: "Dataset slug or path"
        required: true
        default: "isotropic1024coarse"
      points:
        description: |
          Probe points (one per line) as x,y,z in [0,1], e.g.:
          0.10,0.10,0.10
          0.12,0.10,0.10
          0.10,0.12,0.10
        required: true
        default: |
          0.10,0.10,0.10
          0.12,0.10,0.10
          0.10,0.12,0.10
      twin:
        description: "Time window t0,t1,dt"
        required: true
        default: "0.0,1.2,0.0001"
      title:
        description: "Pulse title"
        required: true
        default: "NT Rhythm — RGP–NS Grid"
      tags:
        description: "Space-separated tags"
        required: true
        default: "nt_rhythm turbulence navier_stokes rgp"

permissions:
  contents: write

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: mk
        shell: bash
        run: |
          set -euo pipefail
          # Turn the multiline 'points' input into a JSON array of strings
          printf '%s\n' "${{ github.event.inputs.points }}" \
            | jq -R -s 'split("\n") | map(select(length>0))' > /tmp/pts.json
          echo "matrix=$(cat /tmp/pts.json)" >> "$GITHUB_OUTPUT"

  run-grid:
    needs: plan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        xyz: ${{ fromJson(needs.plan.outputs.matrix) }}

    env:
      SRC:     ${{ github.event.inputs.source }}
      DATASET: ${{ github.event.inputs.dataset }}
      TWIN:    ${{ github.event.inputs.twin }}
      TITLE:   ${{ github.event.inputs.title }}
      TAGS:    ${{ github.event.inputs.tags }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy pyyaml

      - name: Run agent shard
        env:
          PYTHONPATH: ${{ github.workspace }}
          JHTDB_TOKEN: ${{ secrets.JHTDB_TOKEN }}
          NASA_CSV:    ${{ secrets.NASA_CSV }}
        shell: bash
        run: |
          set -euo pipefail
          XYZ="${{ matrix.xyz }}"

          # Convert "x,y,z" -> "[x,y,z]" without a heredoc
          XYZ_JSON=$(python -c 'import sys
s=sys.argv[1].strip()
parts=[p.strip() for p in s.split(",")]
if len(parts)!=3: raise SystemExit("xyz must be x,y,z")
print("[" + ",".join(parts) + "]")' "$XYZ")

          echo "Shard xyz: $XYZ_JSON"

          # Where to stash shard metrics
          STAGE="results/rgp_ns/grid/${{ github.run_id }}"
          mkdir -p "$STAGE"

          # Run the grid wrapper (writes one metrics JSON per shard)
          python agents/rgp_ns/agent_grid.py \
            --source "$SRC" \
            --dataset "$DATASET" \
            --xyz "$XYZ_JSON" \
            --twin "$TWIN" \
            --stage-dir "$STAGE"

      - name: Upload shard artifacts (for safety)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rgp-ns-shards-${{ strategy.job-index }}
          path: results/rgp_ns/grid/${{ github.run_id }}/*.json
          if-no-files-found: ignore

  merge-and-pulse:
    needs: run-grid
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy pyyaml

      - name: Merge shard metrics → combined.json
        shell: bash
        run: |
          set -euo pipefail
          STAGE="results/rgp_ns/grid/${{ github.run_id }}"
          OUT="results/rgp_ns/grid/${{ github.run_id }}/combined.metrics.json"
          mkdir -p "$STAGE"
          python - <<'PY'
          import json,glob,statistics as st,sys,os
          stage = os.path.join("results","rgp_ns","grid",os.environ["GITHUB_RUN_ID"])
          files = sorted(glob.glob(os.path.join(stage,"*.metrics.json")))
          combo = {"shards": [], "source": "", "details": {}}
          for f in files:
            try:
              m = json.load(open(f))
            except Exception:
              continue
            combo["shards"].append(m)
            combo["source"] = combo.get("source") or m.get("source","")
            combo["details"] = combo.get("details") or m.get("details",{})
          # simple rollups for hinting (median of shard main peaks if present)
          def pick(key):
            vals = [s.get(key) for s in combo["shards"] if isinstance(s.get(key),(int,float))]
            return st.median(vals) if vals else None
          combo["period"] = pick("period")
          combo["bpm"] = pick("bpm")
          combo["main_peak_freq"] = pick("main_peak_freq")
          # carry counts if present
          nvals = [s.get("n") for s in combo["shards"] if isinstance(s.get("n"),int)]
          if nvals: combo["n"] = sum(nvals)
          json.dump(combo, open(os.path.join(stage,"combined.metrics.json"),"w"), indent=2)
          PY
          test -s "$OUT" && echo "Combined: $OUT"

      - name: Emit consolidated pulse
        shell: bash
        run: |
          set -euo pipefail
          STAGE="results/rgp_ns/grid/${{ github.run_id }}"
          COMB="$STAGE/combined.metrics.json"
          # Pulse slug keeps batch label logic on fd/pulse side; here we use a grid suffix
          SLUG="${{ github.event.inputs.dataset }}_${{ github.event.inputs.source }}_grid"
          python tools/agent_rhythm/make_pulse.py \
            --metrics "$COMB" \
            --title   "${{ github.event.inputs.title }}" \
            --dataset "$SLUG" \
            --tags    "${{ github.event.inputs.tags }}" \
            --outdir  "pulse/auto"

      - name: Commit combined results + pulse
        run: |
          set -euo pipefail
          git config user.name  "phi-mesh-bot"
          git config user.email "actions@users.noreply.github.com"
          git add results/rgp_ns/grid/${{ github.run_id }}/*.json || true
          git add pulse/auto/*.yml
          git add maps/* || true
          git commit -m "auto: RGP–NS grid run → consolidated results + pulse" || echo "Nothing to commit"
          git push
