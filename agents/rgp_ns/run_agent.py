import os, json, time, pathlib, datetime as dt
from pathlib import Path
import yaml, random

ROOT = Path(__file__).resolve().parents[2]  # repo root
CFG = yaml.safe_load(open(ROOT/"agents/rgp_ns/config.yml"))
Q   = yaml.safe_load(open(ROOT/"agents/rgp_ns/task_queue.yml"))

def load_dataset(meta):
    if meta["source"] == "jhtdb":
        token = os.getenv("JHTDB_TOKEN", "")
        # placeholder: swap with real JHTDB client
        return {"id": meta["id"], "data": "SIMULATED_JHTDB", "token_present": bool(token)}
    if meta["source"] == "local":
        return {"id": meta["id"], "data": f"LOAD:{meta['path']}"}
    raise ValueError("unknown source")

def detect_nt_ticks(dataset, window, threshold_sigma, min_sep):
    # placeholder NT detection (replace with your established method)
    random.seed(42)
    ticks = sorted(random.sample(range(1000), 60))
    # enforce min separation
    cleaned = []
    last = -999
    for t in ticks:
        if t - last >= min_sep:
            cleaned.append(t); last = t
    return cleaned

def nt_ratio_conservation(nt_ticks):
    # placeholder rhythm test (replace with your bootstrap + effect size)
    import statistics as stats
    diffs = [b-a for a,b in zip(nt_ticks, nt_ticks[1:])]
    if len(diffs) < 5: return {"significant": False, "p": 1.0, "effect_size": 0.0}
    m, s = stats.mean(diffs), (stats.pstdev(diffs) or 1.0)
    effect = min(1.0, abs(m)/s)
    pval   = 0.005 if effect > 0.2 else 0.2
    return {"significant": pval < CFG["rhythm_test"]["alpha"], "p": pval, "effect_size": effect, "mean_gap": m}

def write_results(dataset_id, variant, nt_ticks, test):
    ts = dt.datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    outdir = ROOT / "results" / "rgp_ns" / dataset_id / f"run_{ts}"
    outdir.mkdir(parents=True, exist_ok=True)
    (outdir/"nt_ticks.json").write_text(json.dumps(nt_ticks))
    (outdir/"summary.json").write_text(json.dumps({"variant": variant, "test": test}, indent=2))
    return outdir

def write_pulse(dataset_id, outdir, test):
    ts = dt.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
    pulses = ROOT / "pulse" / "auto"
    pulses.mkdir(parents=True, exist_ok=True)
    status = "pass" if test["significant"] and test["effect_size"]>=CFG["rhythm_test"]["effect_size_min"] else "inconclusive"
    yml = f"""---
title: "RGP–NS Auto Run — {dataset_id} — {ts}"
date: {ts}
status: {status}
tags: [RGP, NT, Rhythm, NavierStokes, Turbulence]
datasets: ["{dataset_id}"]
results_path: "{outdir.relative_to(ROOT)}"
metrics:
  p_value: {test['p']}
  effect_size: {test['effect_size']}
  mean_gap: {test.get('mean_gap', 'NA')}
papers:
  - {{"title": "Experimenter’s Guide — RGP vs Navier–Stokes", "doi": "{os.getenv('ZENODO_DOI','')}" }}
podcasts: []
notes: >
  Auto-generated by RGP–NS Agent Loop. See results_path for artifacts.
"""
    (pulses / f"{dataset_id}_{ts.replace(':','-')}.yml").write_text(yml)

def main():
    for item in Q["queue"]:
        ds_meta = next(d for d in CFG["datasets"] if d["id"] == item["dataset"])
        ds = load_dataset(ds_meta)
        for variant in item["variants"]:
            ticks = detect_nt_ticks(ds, variant["window"], variant["threshold_sigma"], CFG["nt_detection"]["min_separation"])
            test  = nt_ratio_conservation(ticks)
            out   = write_results(ds_meta["id"], variant, ticks, test)
            if CFG["publishing"]["make_pulse"]:
                write_pulse(ds_meta["id"], out, test)

if __name__ == "__main__":
    main()
